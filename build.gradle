plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.springdoc.openapi-gradle-plugin' version '1.3.4'
	id 'java'
	id 'war'
	id 'org.jetbrains.kotlin.jvm' version '1.6.21'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.6.21'
}

ext {
	warArchiveFileName = 'spring-boot-2-api.war'
	javaVersion = '17'
}

group = 'com.prototype'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = javaVersion

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// SpringBoot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// Kotlin
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	// DB
	runtimeOnly 'mysql:mysql-connector-java'
	// Swagger
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.8'
	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// テスト
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	// サポートツール
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = '17'
	}
}

/**
 * ローカル環境用のdockerを起動
 */
task dockerComposeUp (type: Exec) {
	commandLine 'docker-compose','-f','docker-local/docker-compose.yml','up','-d'
	doLast {
		// dockerが起動するまでスリープを設定(5秒は例)
		Thread.sleep(5 * 1000)
	}
}

/**
 * ローカル環境用のdockerを停止
 */
task dockerComposeDown (type: Exec) {
	commandLine 'docker-compose', '-f', 'docker-local/docker-compose.yml', 'down', '--remove-orphans', '--volumes'
}

/**
 * ローカル環境の起動処理
 * 組み込みのtomcatで起動する場合に使用します
 */
bootRun {
	systemProperty("spring.profiles.active", "local")
}

/**
 * tomcat内臓のwar生成用コマンド
 * build/libs配下にwarが出力されます
 */
bootWar {
	archiveFileName = warArchiveFileName
}

/**
 * tomcatを含まないプレーンなwar生成用コマンド
 * build/libs配下にwarが出力されます
 * Intellijなどでローカル環境のTomcat設定を行う場合、
 * VMオプションに -Dspring.profiles.active=local を指定してください
 */
war {
	archiveFileName = warArchiveFileName
}

/**
 * テストの実行処理
 */
test {
	systemProperty("spring.profiles.active", "test")
	useJUnitPlatform()
	dependsOn(dockerComposeUp)
	finalizedBy(dockerComposeDown)
}
